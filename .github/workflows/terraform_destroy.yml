name: Terraform Destroy Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      tfvars:
        required: true
        type: string
      backend_config:
        required: true
        type: string
      terraform_version:
        required: false
        type: string
        default: '1.5.7'  # Default Terraform version, can be overridden
      IAM_OIDC_ROLE:
        required: true
        type: string
      REGION:
        required: true
        type: string

jobs:
  destroy-plan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    concurrency:
      #group: deploy-${{ github.job }}-${{ inputs.environment }}
      group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment }}
      cancel-in-progress: true
    steps:
      - name: Print selected environment
        run: |
          echo "Running for environment: ${{ github.event.inputs.environment }}"

      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::140023376669:role/cmrs-DEV-TH-custom-GithubOIDCRole
          aws-region: ap-southeast-7
    
      - name: Cache Terraform Providers & Modules
        uses: actions/cache@v4
        with:
          path: |
            .terraform/providers
            .terraform/modules
          key: terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            "terraform-${{ github.repository }}-${{ inputs.environment }}"

      - name: Terraform Init
        run: |
          terraform init -backend-config="${{ inputs.backend_config }}" -backend-config="key=state/${{ github.repository }}-terraform.tfstate" \
           || (
            echo "Retrying with -upgrade due to possible cache issue..." &&
            terraform init -upgrade -backend-config="${{ inputs.backend_config }}" -backend-config="key=state/${{ github.repository }}-terraform.tfstate"
          )

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Load secrets from AWS Secrets Manager
        id: secrets
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id arn:aws:secretsmanager:ap-southeast-7:140023376669:secret:test-4YV1Ej \
            --query SecretString \
            --output text)

          # Parse each key into TF_VAR_ environment variables
          echo "$SECRET_JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "::add-mask::$value"                     
            echo "TF_VAR_$key=$value" >> "$GITHUB_ENV"    
          done

      - name: Terraform Plan
        run: terraform plan -var-file=terraform.${{ github.event.inputs.environment }}.tfvars -destroy -out=tfdestroy.plan | tee tfplan.txt

      - name: Print Terraform summary
        uses: sgametrio/terraform-summary-action@main
        with:
          log-file: tfplan.txt
          title: Terraform Destroy Plan Summary

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
            name: terraform-destroy-plan-${{ inputs.environment }}
            path: tfdestroy.plan

  destroy-apply:
    runs-on: ubuntu-latest
    needs: destroy-plan
    permissions:
      id-token: write
      contents: read
    environment: ${{ inputs.environment }}
    concurrency:
      #group: deploy-${{ github.job }}-${{ inputs.environment }}
      group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment }}
      cancel-in-progress: false
    steps:
      - name: Print selected environment
        run: |
          echo "Running for environment: ${{ github.event.inputs.environment }}"

      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::140023376669:role/cmrs-DEV-TH-custom-GithubOIDCRole
          aws-region: ap-southeast-7
    
      - name: Cache Terraform Providers & Modules
        uses: actions/cache@v4
        with:
          path: |
            .terraform/providers
            .terraform/modules
          key: terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            "terraform-${{ github.repository }}-${{ inputs.environment }}"

      - name: Terraform Init
        run: |
          terraform init -backend-config="${{ inputs.backend_config }}" -backend-config="key=state/${{ github.repository }}-terraform.tfstate" \
           || (
            echo "Retrying with -upgrade due to possible cache issue..." &&
            terraform init -upgrade -backend-config="${{ inputs.backend_config }}" -backend-config="key=state/${{ github.repository }}-terraform.tfstate"
          )

      - uses: actions/download-artifact@v4
        with:
          name: terraform-destroy-plan-${{ inputs.environment }}

      - name: Terraform Destroy
        run: terraform apply -auto-approve tfdestroy.plan
        

  unlock-state:
    runs-on: ubuntu-latest
    if: always()  # <-- This ensures it runs even if terraform job fails
    needs: [destroy-plan,destroy-apply]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::140023376669:role/cmrs-DEV-TH-custom-GithubOIDCRole
          aws-region: ap-southeast-7

      - name: Remove Terraform Lock
        env:
          AWS_REGION: ap-southeast-7
        run: |
          LOCK_ID="terraform-state-140023376669/state/${{ github.repository }}-terraform.tfstate.tflock"

          echo "Checking for lock ID: $LOCK_ID in $TABLE_NAME"
          aws s3 rm s3://$LOCK_ID \
            --region "$AWS_REGION" \
            || echo "No lock found or already removed"