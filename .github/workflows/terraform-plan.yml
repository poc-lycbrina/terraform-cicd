name: Terraform Plan Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      tfvars:
        required: true
        type: string
      apply:
        required: false
        type: boolean
        default: false
      opa_check:
        required: false
        type: boolean
        default: false
      backend_config:
        required: true
        type: string
      terraform_version:
        required: false
        type: string
        default: '1.5.7'  # Default Terraform version, can be overridden
      IAM_OIDC_ROLE:
        required: true
        type: string
      REGION:
        required: true
        type: string


jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    concurrency:
      #group: deploy-${{ github.job }}-${{ inputs.environment }}
      group: ${{ github.workflow }}-${{ inputs.environment }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${ inputs.terraform_version }

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.IAM_OIDC_ROLE }}
          aws-region: ${{ inputs.REGION }}

      - name: Terraform Format Check (fmt)
        id: fmt
        run: terraform fmt -check -recursive


      - name: Cache Terraform Providers & Modules
        uses: actions/cache@v4
        with:
          path: |
            .terraform/providers
            .terraform/modules
          key: terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            "terraform-${{ github.repository }}-${{ inputs.environment }}"

      - name: Terraform Init
        id: init
        run: |
          terraform init -backend-config="${{ inputs.backend_config }}" -backend-config="key=state/${{ github.repository }}-terraform.tfstate" \
           || (
            echo "Retrying with -upgrade due to possible cache issue..." &&
            terraform init -upgrade -backend-config="${{ inputs.backend_config }}" -backend-config="key=state/${{ github.repository }}-terraform.tfstate"
          )

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Lint (tflint)
        uses: reviewdog/action-tflint@v1
        with:
          reporter: github-check
          fail_level: warning

      # - name: Terraform Security Scan (tfsec)
      #   uses: triat/terraform-security-scan@v3
      #   continue-on-error: true

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Load secrets from AWS Secrets Manager
        id: secrets
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value \
            --secret-id arn:aws:secretsmanager:ap-southeast-7:140023376669:secret:test-4YV1Ej \
            --query SecretString \
            --output text)

          # Parse each key into TF_VAR_ environment variables
          echo "$SECRET_JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "::add-mask::$value"                     
            echo "TF_VAR_$key=$value" >> "$GITHUB_ENV"    
          done


      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file="${{ inputs.tfvars }}" -out=plan.tfplan | tee tfplan.txt
          terraform show -json plan.tfplan > tfplan.json
        continue-on-error: true  

      - name: Print Terraform summary
        uses: sgametrio/terraform-summary-action@main
        with:
          log-file: tfplan.txt
          # Optional
          title: Terraform Plan Summary
  
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: OPA Check
        if: ${{ inputs.opa_check }}
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          mv opa /usr/local/bin/
          result=$(opa eval --input tfplan.json --data .github/workflows/policies/ "data.terraform.validation")
          echo $result
          violations=$(echo "$result" | jq '.result[0].expressions[0].value.deny | length')
          echo $violations

          if [ "$violations" -gt 0 ]; then
            echo "❌ Policy violations detected:"
            echo "$result" | jq -r '.result[0].expressions[0].value.deny'
            exit 1
          else
            echo "✅ No policy violations detected!"
          fi

          # ./opa eval --input terraform.plan.json --data opa/ "data.terraform.deny"

      - name: Upload plan artifact
        if: ${{ inputs.apply }}
        uses: actions/upload-artifact@v4
        with:
            name: terraform-plan-${{ inputs.environment }}
            path: plan.tfplan


  # unlock-state:
  #   runs-on: ubuntu-latest
  #   if: always()  # <-- This ensures it runs even if terraform job fails
  #   needs: terraform-plan
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       if: ${{ inputs.apply }} != true
  #       with:
  #         role-to-assume: ${{ inputs.IAM_OIDC_ROLE }}
  #         aws-region: ${{ inputs.REGION }}

  #     - name: Remove DynamoDB Lock
  #       if: ${{ inputs.apply }} != true
  #       env:
  #         AWS_REGION: ${{ inputs.REGION }}
  #       run: |
  #         # Replace with your actual LockID and table name
  #         LOCK_ID="terraform-state-140023376669/state/${{ github.repository }}-terraform.tfstate"
  #         TABLE_NAME="tterraform-state-140023376669"

  #         echo "Checking for lock ID: $LOCK_ID in $TABLE_NAME"
  #         aws dynamodb delete-item \
  #           --table-name "$TABLE_NAME" \
  #           --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" \
  #           --region "$AWS_REGION" \
  #           || echo "No lock found or already removed"