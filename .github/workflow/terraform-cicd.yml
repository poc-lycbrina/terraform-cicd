name: Reusable Terraform Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      tfvars:
        required: true
        type: string
      apply:
        required: false
        type: boolean
        default: false
      opa_check:
        required: false
        type: boolean
        default: false
      backend_config:
        required: true
        type: string
      terraform_version:
        required: false
        type: string
        default: '1.5.7'  # Default Terraform version, can be overridden
      IAM_OIDC_ROLE:
        required: true
        type: string
      REGION:
        required: true
        type: string


jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${ inputs.terraform_version }

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.IAM_OIDC_ROLE }}
          aws-region: ${{ inputs.REGION }}

      - name: Terraform Format Check (fmt)
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend-config="${{ inputs.backend_config }}" -backend-config="key=state/${{ github.repository }}-terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Lint (tflint)
        uses: reviewdog/action-tflint@v1
        with:
          reporter: github-check
          fail_on_error: true

      - name: Terraform Security Scan (tfsec)
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          fail_on_error: true
          format: github-actions
          severity: medium

      - name: Terraform Plan
        run: terraform plan -var-file="${{ inputs.tfvars }}" -out=plan.tfplan

      - name: OPA Check
        if: ${{ inputs.opa_check }}
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          ./opa eval --input terraform.plan.json --data opa/ "data.terraform.deny"

      - name: Terraform Apply
        if: ${{ inputs.apply }}
        run: terraform apply -auto-approve plan.tfplan
